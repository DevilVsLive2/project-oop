import { Setter } from "./Handle";
import { Widget } from "./Widget";

export class Destructable extends Widget {
  public toHandle(): HDestructable | null {
    return this.handle as HDestructable;
  }

  ///
  /// Autogenerated
  ///

  ///
  /// Functions
  ///

  public queueAnimation(whichAnimation: string): this {
    QueueDestructableAnimation(this.toHandle(), whichAnimation);
    return this;
  }

  public setPosition(x: number, y: number): this {
    SetDestructablePosition(this.toHandle(), x, y);
    return this;
  }

  public setAnimation(whichAnimation: string): this {
    SetDestructableAnimation(this.toHandle(), whichAnimation);
    return this;
  }

  public show(flag: boolean): this {
    ShowDestructable(this.toHandle(), flag);
    return this;
  }

  public kill(): this {
    KillDestructable(this.toHandle());
    return this;
  }

  public setAnimationByIndex(animIndex: number): this {
    SetDestructableAnimationByIndex(this.toHandle(), animIndex);
    return this;
  }

  public getVertexColour(): number {
    return GetDestructableVertexColour(this.toHandle());
  }

  public setMaterialTexture(textureName: string, materialId: number, textureIndex: number): this {
    SetDestructableMaterialTexture(this.toHandle(), textureName, materialId, textureIndex);
    return this;
  }

  public getName(): string {
    return GetDestructableName(this.toHandle());
  }

  public destructableRestoreLife(life: number, birth: boolean): this {
    DestructableRestoreLife(this.toHandle(), life, birth);
    return this;
  }

  public setOrientation(yaw: number, pitch: number, roll: number): this {
    SetDestructableOrientation(this.toHandle(), yaw, pitch, roll);
    return this;
  }

  public setAnimationWithRarityByIndex(animIndex: number, rarity: HRarityControl): this {
    SetDestructableAnimationWithRarityByIndex(this.toHandle(), animIndex, rarity);
    return this;
  }

  public setModelEx(modelFile: string, playerId: number): this {
    SetDestructableModelEx(this.toHandle(), modelFile, playerId);
    return this;
  }

  public setSpaceRotation(yaw: number, pitch: number, roll: number, eulerOrder: number): this {
    SetDestructableSpaceRotation(this.toHandle(), yaw, pitch, roll, eulerOrder);
    return this;
  }

  public getFacing(): number {
    return GetDestructableFacing(this.toHandle());
  }

  public setFacing(facing: number, isInstant: boolean): this {
    SetDestructableFacing(this.toHandle(), facing, isInstant);
    return this;
  }

  public setAnimationSpeed(speedFactor: number): this {
    SetDestructableAnimationSpeed(this.toHandle(), speedFactor);
    return this;
  }

  public getTypeId(): number {
    return GetDestructableTypeId(this.toHandle());
  }

  public setReplaceableTexture(textureName: string, textureIndex: number): this {
    SetDestructableReplaceableTexture(this.toHandle(), textureName, textureIndex);
    return this;
  }

  public remove(): this {
    RemoveDestructable(this.toHandle());
    return this;
  }

  public setVertexColour(red: number, green: number, blue: number, alpha: number): this {
    SetDestructableVertexColour(this.toHandle(), red, green, blue, alpha);
    return this;
  }

  public queueAnimationByIndex(animIndex: number): this {
    QueueDestructableAnimationByIndex(this.toHandle(), animIndex);
    return this;
  }

  public setAnimationWithRarity(animation: string, rarity: HRarityControl): this {
    SetDestructableAnimationWithRarity(this.toHandle(), animation, rarity);
    return this;
  }

  public setTexture(textureName: string, textureIndex: number): this {
    SetDestructableTexture(this.toHandle(), textureName, textureIndex);
    return this;
  }

  public setModel(modelFile: string): this {
    SetDestructableModel(this.toHandle(), modelFile);
    return this;
  }

  ///
  /// Props
  ///

  public scale(): number;
  public scale(value: Setter<number, this>): this;
  public scale(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetDestructableScale(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetDestructableScale(this.toHandle());
    }

    SetDestructableScale(this.toHandle(), value);
    return this;
  }

  public y(): number;
  public y(value: Setter<number, this>): this;
  public y(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetDestructableY(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetDestructableY(this.toHandle());
    }

    SetDestructableY(this.toHandle(), value);
    return this;
  }

  public yaw(): number;
  public yaw(value: Setter<number, this>): this;
  public yaw(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetDestructableYaw(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetDestructableYaw(this.toHandle());
    }

    SetDestructableYaw(this.toHandle(), value);
    return this;
  }

  public life(): number;
  public life(value: Setter<number, this>): this;
  public life(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetDestructableLife(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetDestructableLife(this.toHandle());
    }

    SetDestructableLife(this.toHandle(), value);
    return this;
  }

  public pitch(): number;
  public pitch(value: Setter<number, this>): this;
  public pitch(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetDestructablePitch(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetDestructablePitch(this.toHandle());
    }

    SetDestructablePitch(this.toHandle(), value);
    return this;
  }

  public occluderHeight(): number;
  public occluderHeight(value: Setter<number, this>): this;
  public occluderHeight(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetDestructableOccluderHeight(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetDestructableOccluderHeight(this.toHandle());
    }

    SetDestructableOccluderHeight(this.toHandle(), value);
    return this;
  }

  public x(): number;
  public x(value: Setter<number, this>): this;
  public x(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetDestructableX(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetDestructableX(this.toHandle());
    }

    SetDestructableX(this.toHandle(), value);
    return this;
  }

  public invulnerable(): boolean;
  public invulnerable(value: Setter<boolean, this>): this;
  public invulnerable(value?: Setter<boolean, this>): boolean | this {
    if (typeof value === "function") {
      value = value(IsDestructableInvulnerable(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return IsDestructableInvulnerable(this.toHandle());
    }

    SetDestructableInvulnerable(this.toHandle(), value);
    return this;
  }

  public timeScale(): number;
  public timeScale(value: Setter<number, this>): this;
  public timeScale(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetDestructableTimeScale(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetDestructableTimeScale(this.toHandle());
    }

    SetDestructableTimeScale(this.toHandle(), value);
    return this;
  }

  public roll(): number;
  public roll(value: Setter<number, this>): this;
  public roll(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetDestructableRoll(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetDestructableRoll(this.toHandle());
    }

    SetDestructableRoll(this.toHandle(), value);
    return this;
  }

  public positionLocation(): HLocation;
  public positionLocation(value: Setter<HLocation, this>): this;
  public positionLocation(value?: Setter<HLocation, this>): HLocation | this {
    if (typeof value === "function") {
      value = value(GetDestructablePositionLocation(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetDestructablePositionLocation(this.toHandle());
    }

    SetDestructablePositionLocation(this.toHandle(), value);
    return this;
  }

  public maxLife(): number;
  public maxLife(value: Setter<number, this>): this;
  public maxLife(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetDestructableMaxLife(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetDestructableMaxLife(this.toHandle());
    }

    SetDestructableMaxLife(this.toHandle(), value);
    return this;
  }
}

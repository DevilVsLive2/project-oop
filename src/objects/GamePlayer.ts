import { RemoveHandleEvent } from "./events/RemoveHandleEvent";
import { Handle, Setter } from "./Handle";
import { Event } from "./events/Event";
import { ObjectStorage } from "../services/ObjectStorage";
import { Unit } from "./Unit";
import { Widget } from "./Widget";

const objectStorage = ObjectStorage.getInstance();

export class GamePlayer extends Handle {
  constructor(player: HPlayer);

  public constructor(player: HPlayer) {
    super(player);
  }

  // Todo createUnit

  public toHandle(): HPlayer | null {
    return this.handle as HPlayer;
  }

  ///
  /// Autogenerated
  ///

  ///
  /// Functions
  ///

  public getStructureCount(includeIncomplete: boolean): number {
    return GetPlayerStructureCount(this.toHandle(), includeIncomplete);
  }

  public addTechResearched(techid: number, levels: number): this {
    AddPlayerTechResearched(this.toHandle(), techid, levels);
    return this;
  }

  public setState(whichPlayerState: HPlayerState, value: number): this {
    SetPlayerState(this.toHandle(), whichPlayerState, value);
    return this;
  }

  public startMeleeAI(script: string): this {
    StartMeleeAI(this.toHandle(), script);
    return this;
  }

  public cacheHeroData(): this {
    CachePlayerHeroData(this.toHandle());
    return this;
  }

  public getScore(whichPlayerScore: HPlayerScore): number {
    return GetPlayerScore(this.toHandle(), whichPlayerScore);
  }

  public setFogStateRadius(whichState: HFogState, centerx: number, centerY: number, radius: number, useSharedVision: boolean): this {
    SetFogStateRadius(this.toHandle(), whichState, centerx, centerY, radius, useSharedVision);
    return this;
  }

  public setTechMaxAllowed(techid: number, maximum: number): this {
    SetPlayerTechMaxAllowed(this.toHandle(), techid, maximum);
    return this;
  }

  public isAlly(otherPlayer: GamePlayer): boolean {
    return IsPlayerAlly(this.toHandle(), otherPlayer.toHandle());
  }

  public setBlightRect(r: HRect, addBlight: boolean): this {
    SetBlightRect(this.toHandle(), r, addBlight);
    return this;
  }

  public issueNeutralTargetOrderById(neutralStructure: Unit, unitId: number, target: Widget): boolean {
    return IssueNeutralTargetOrderById(this.toHandle(), neutralStructure.toHandle(), unitId, target.toHandle());
  }

  public removePlayer(gameResult: HPlayerGameResult): this {
    RemovePlayer(this.toHandle(), gameResult);
    return this;
  }

  public setAlliance(otherPlayer: GamePlayer, whichAllianceSetting: HAllianceType, value: boolean): this {
    SetPlayerAlliance(this.toHandle(), otherPlayer.toHandle(), whichAllianceSetting, value);
    return this;
  }

  public getUnitCount(includeIncomplete: boolean): number {
    return GetPlayerUnitCount(this.toHandle(), includeIncomplete);
  }

  public forceStartLocation(startLocIndex: number): this {
    ForcePlayerStartLocation(this.toHandle(), startLocIndex);
    return this;
  }

  public getUnitSelectedCountBy(): number {
    return GetUnitSelectedCountByPlayer(this.toHandle());
  }

  public getAIDifficulty(): HAIDifficulty {
    return GetAIDifficulty(this.toHandle());
  }

  public getTechCount(techid: number, specificonly: boolean): number {
    return GetPlayerTechCount(this.toHandle(), techid, specificonly);
  }

  public issueNeutralTargetOrder(neutralStructure: Unit, unitToBuild: string, target: Widget): boolean {
    return IssueNeutralTargetOrder(this.toHandle(), neutralStructure.toHandle(), unitToBuild, target.toHandle());
  }

  public getId(): number {
    return GetPlayerId(this.toHandle());
  }

  public cripple(toWhichPlayers: HForce, flag: boolean): this {
    CripplePlayer(this.toHandle(), toWhichPlayers, flag);
    return this;
  }

  public getSlotState(): HPlayerSlotState {
    return GetPlayerSlotState(this.toHandle());
  }

  public playerSetLeaderboard(lb: HLeaderBoard): this {
    PlayerSetLeaderboard(this.toHandle(), lb);
    return this;
  }

  public createCorpse(unitid: number, x: number, y: number, face: number): Unit {
    return objectStorage.getOrWrap(CreateCorpse(this.toHandle(), unitid, x, y, face));
  }

  public isEnemy(otherPlayer: GamePlayer): boolean {
    return IsPlayerEnemy(this.toHandle(), otherPlayer.toHandle());
  }

  public createFogModifierRadius(
    whichState: HFogState,
    centerx: number,
    centerY: number,
    radius: number,
    useSharedVision: boolean,
    afterUnits: boolean
  ): HFogModifier {
    return CreateFogModifierRadius(this.toHandle(), whichState, centerx, centerY, radius, useSharedVision, afterUnits);
  }

  public setFogStateRadiusLoc(whichState: HFogState, center: HLocation, radius: number, useSharedVision: boolean): this {
    SetFogStateRadiusLoc(this.toHandle(), whichState, center, radius, useSharedVision);
    return this;
  }

  public pauseCompAI(pause: boolean): this {
    PauseCompAI(this.toHandle(), pause);
    return this;
  }

  public createUnitAtLoc(unitid: number, whichLocation: HLocation, face: number): Unit {
    return objectStorage.getOrWrap(CreateUnitAtLoc(this.toHandle(), unitid, whichLocation, face));
  }

  public setUnitsOwner(newOwner: number): this {
    SetPlayerUnitsOwner(this.toHandle(), newOwner);
    return this;
  }

  public displayTimedTextTo(x: number, y: number, duration: number, message: string): this {
    DisplayTimedTextToPlayer(this.toHandle(), x, y, duration, message);
    return this;
  }

  public setRacePreference(whichRacePreference: HRacePreference): this {
    SetPlayerRacePreference(this.toHandle(), whichRacePreference);
    return this;
  }

  public issueNeutralImmediateOrder(neutralStructure: Unit, unitToBuild: string): boolean {
    return IssueNeutralImmediateOrder(this.toHandle(), neutralStructure.toHandle(), unitToBuild);
  }

  public getFirstUnitInSelection(): Unit {
    return objectStorage.getOrWrap(GetFirstUnitInSelection(this.toHandle()));
  }

  public getUnitSelected(): Unit {
    return objectStorage.getOrWrap(GetUnitSelected(this.toHandle()));
  }

  public setRaceSelectable(value: boolean): this {
    SetPlayerRaceSelectable(this.toHandle(), value);
    return this;
  }

  public getTournamentScore(): number {
    return GetTournamentScore(this.toHandle());
  }

  public issueNeutralImmediateOrderById(neutralStructure: Unit, unitId: number): boolean {
    return IssueNeutralImmediateOrderById(this.toHandle(), neutralStructure.toHandle(), unitId);
  }

  public createUnitAtLocByName(unitname: string, whichLocation: HLocation, face: number): Unit {
    return objectStorage.getOrWrap(CreateUnitAtLocByName(this.toHandle(), unitname, whichLocation, face));
  }

  public getRace(): HRace {
    return GetPlayerRace(this.toHandle());
  }

  public setAbilityAvailable(abilid: number, avail: boolean): this {
    SetPlayerAbilityAvailable(this.toHandle(), abilid, avail);
    return this;
  }

  public getTechMaxAllowed(techid: number): number {
    return GetPlayerTechMaxAllowed(this.toHandle(), techid);
  }

  public displayTimedTextFrom(x: number, y: number, duration: number, message: string): this {
    DisplayTimedTextFromPlayer(this.toHandle(), x, y, duration, message);
    return this;
  }

  public setBlightPoint(x: number, y: number, addBlight: boolean): this {
    SetBlightPoint(this.toHandle(), x, y, addBlight);
    return this;
  }

  public setTechResearched(techid: number, setToLevel: number): this {
    SetPlayerTechResearched(this.toHandle(), techid, setToLevel);
    return this;
  }

  public displayTextTo(x: number, y: number, message: string): this {
    DisplayTextToPlayer(this.toHandle(), x, y, message);
    return this;
  }

  public startCampaignAI(script: string): this {
    StartCampaignAI(this.toHandle(), script);
    return this;
  }

  public issueNeutralPointOrder(neutralStructure: Unit, unitToBuild: string, x: number, y: number): boolean {
    return IssueNeutralPointOrder(this.toHandle(), neutralStructure.toHandle(), unitToBuild, x, y);
  }

  public getTaxRate(otherPlayer: GamePlayer, whichResource: HPlayerState): number {
    return GetPlayerTaxRate(this.toHandle(), otherPlayer.toHandle(), whichResource);
  }

  public removeAllGuardPositions(): this {
    RemoveAllGuardPositions(this.toHandle());
    return this;
  }

  public commandAI(command: number, data: number): this {
    CommandAI(this.toHandle(), command, data);
    return this;
  }

  public getState(whichPlayerState: HPlayerState): number {
    return GetPlayerState(this.toHandle(), whichPlayerState);
  }

  public isInForce(whichForce: HForce): boolean {
    return IsPlayerInForce(this.toHandle(), whichForce);
  }

  public createFogModifierRect(whichState: HFogState, where: HRect, useSharedVision: boolean, afterUnits: boolean): HFogModifier {
    return CreateFogModifierRect(this.toHandle(), whichState, where, useSharedVision, afterUnits);
  }

  public setOnScoreScreen(flag: boolean): this {
    SetPlayerOnScoreScreen(this.toHandle(), flag);
    return this;
  }

  public setTaxRate(otherPlayer: GamePlayer, whichResource: HPlayerState, rate: number): this {
    SetPlayerTaxRate(this.toHandle(), otherPlayer.toHandle(), whichResource, rate);
    return this;
  }

  public createUnit(unitid: number, x: number, y: number, face: number): Unit {
    return objectStorage.getOrWrap(CreateUnit(this.toHandle(), unitid, x, y, face));
  }

  public setBlight(x: number, y: number, radius: number, addBlight: boolean): this {
    SetBlight(this.toHandle(), x, y, radius, addBlight);
    return this;
  }

  public createBlightedGoldmine(x: number, y: number, face: number): Unit {
    return objectStorage.getOrWrap(CreateBlightedGoldmine(this.toHandle(), x, y, face));
  }

  public isRacePrefSet(pref: HRacePreference): boolean {
    return IsPlayerRacePrefSet(this.toHandle(), pref);
  }

  public createFogModifierRadiusLoc(
    whichState: HFogState,
    center: HLocation,
    radius: number,
    useSharedVision: boolean,
    afterUnits: boolean
  ): HFogModifier {
    return CreateFogModifierRadiusLoc(this.toHandle(), whichState, center, radius, useSharedVision, afterUnits);
  }

  public setBlightLoc(whichLocation: HLocation, radius: number, addBlight: boolean): this {
    SetBlightLoc(this.toHandle(), whichLocation, radius, addBlight);
    return this;
  }

  public isObserver(): boolean {
    return IsPlayerObserver(this.toHandle());
  }

  public dialogDisplay(whichDialog: HDialog, flag: boolean): this {
    DialogDisplay(this.toHandle(), whichDialog, flag);
    return this;
  }

  public getSelectable(): boolean {
    return GetPlayerSelectable(this.toHandle());
  }

  public setFogStateRect(whichState: HFogState, where: HRect, useSharedVision: boolean): this {
    SetFogStateRect(this.toHandle(), whichState, where, useSharedVision);
    return this;
  }

  public getTypedUnitCount(unitName: string, includeIncomplete: boolean, includeUpgrades: boolean): number {
    return GetPlayerTypedUnitCount(this.toHandle(), unitName, includeIncomplete, includeUpgrades);
  }

  public playerGetLeaderboard(): HLeaderBoard {
    return PlayerGetLeaderboard(this.toHandle());
  }

  public issueNeutralPointOrderById(neutralStructure: Unit, unitId: number, x: number, y: number): boolean {
    return IssueNeutralPointOrderById(this.toHandle(), neutralStructure.toHandle(), unitId, x, y);
  }

  public getAlliance(otherPlayer: GamePlayer, whichAllianceSetting: HAllianceType): boolean {
    return GetPlayerAlliance(this.toHandle(), otherPlayer.toHandle(), whichAllianceSetting);
  }

  public getTechResearched(techid: number, specificonly: boolean): boolean {
    return GetPlayerTechResearched(this.toHandle(), techid, specificonly);
  }

  public createUnitByName(unitname: string, x: number, y: number, face: number): Unit {
    return objectStorage.getOrWrap(CreateUnitByName(this.toHandle(), unitname, x, y, face));
  }

  ///
  /// Props
  ///

  public handicapXP(): number;
  public handicapXP(value: Setter<number, this>): this;
  public handicapXP(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetPlayerHandicapXP(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetPlayerHandicapXP(this.toHandle());
    }

    SetPlayerHandicapXP(this.toHandle(), value);
    return this;
  }

  public startLocation(): number;
  public startLocation(value: Setter<number, this>): this;
  public startLocation(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetPlayerStartLocation(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetPlayerStartLocation(this.toHandle());
    }

    SetPlayerStartLocation(this.toHandle(), value);
    return this;
  }

  public handicap(): number;
  public handicap(value: Setter<number, this>): this;
  public handicap(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetPlayerHandicap(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetPlayerHandicap(this.toHandle());
    }

    SetPlayerHandicap(this.toHandle(), value);
    return this;
  }

  public team(): number;
  public team(value: Setter<number, this>): this;
  public team(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetPlayerTeam(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetPlayerTeam(this.toHandle());
    }

    SetPlayerTeam(this.toHandle(), value);
    return this;
  }

  public name(): string;
  public name(value: Setter<string, this>): this;
  public name(value?: Setter<string, this>): string | this {
    if (typeof value === "function") {
      value = value(GetPlayerName(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetPlayerName(this.toHandle());
    }

    SetPlayerName(this.toHandle(), value);
    return this;
  }

  public controller(): HMapControl;
  public controller(value: Setter<HMapControl, this>): this;
  public controller(value?: Setter<HMapControl, this>): HMapControl | this {
    if (typeof value === "function") {
      value = value(GetPlayerController(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetPlayerController(this.toHandle());
    }

    SetPlayerController(this.toHandle(), value);
    return this;
  }

  public color(): HPlayerColor;
  public color(value: Setter<HPlayerColor, this>): this;
  public color(value?: Setter<HPlayerColor, this>): HPlayerColor | this {
    if (typeof value === "function") {
      value = value(GetPlayerColor(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetPlayerColor(this.toHandle());
    }

    SetPlayerColor(this.toHandle(), value);
    return this;
  }
}

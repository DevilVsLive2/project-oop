import { Handle, Setter } from "./Handle";

export class Widget extends Handle {
  public toHandle(): HWidget | null {
    return this.handle as HWidget;
  }

  ///
  /// Autogenerated
  ///

  ///
  /// Functions
  ///

  public setTexture(textureName: string, textureIndex: number): void {
    return SetWidgetTexture(this.toHandle(), textureName, textureIndex);
  }

  public getVertexColour(): number {
    return GetWidgetVertexColour(this.toHandle());
  }

  public addIndicator(red: number, green: number, blue: number, alpha: number): void {
    return AddIndicator(this.toHandle(), red, green, blue, alpha);
  }

  public setPosition(x: number, y: number): void {
    return SetWidgetPosition(this.toHandle(), x, y);
  }

  public setSpaceRotation(yaw: number, pitch: number, roll: number, eulerOrder: number): void {
    return SetWidgetSpaceRotation(this.toHandle(), yaw, pitch, roll, eulerOrder);
  }

  public setAnimationWithRarity(animation: string, rarity: HRarityControl): void {
    return SetWidgetAnimationWithRarity(this.toHandle(), animation, rarity);
  }

  public setReplaceableTexture(textureName: string, textureIndex: number): void {
    return SetWidgetReplaceableTexture(this.toHandle(), textureName, textureIndex);
  }

  public setModelEx(modelFile: string, playerId: number): void {
    return SetWidgetModelEx(this.toHandle(), modelFile, playerId);
  }

  public setModel(modelFile: string): void {
    return SetWidgetModel(this.toHandle(), modelFile);
  }

  public setAnimationWithRarityByIndex(animIndex: number, rarity: HRarityControl): void {
    return SetWidgetAnimationWithRarityByIndex(this.toHandle(), animIndex, rarity);
  }

  public setMaterialTexture(textureName: string, materialId: number, textureIndex: number): void {
    return SetWidgetMaterialTexture(this.toHandle(), textureName, materialId, textureIndex);
  }

  public queueAnimationByIndex(animIndex: number): void {
    return QueueWidgetAnimationByIndex(this.toHandle(), animIndex);
  }

  public getFacing(): number {
    return GetWidgetFacing(this.toHandle());
  }

  public queueAnimation(animation: string): void {
    return QueueWidgetAnimation(this.toHandle(), animation);
  }

  public setFacing(facing: number, isInstant: boolean): void {
    return SetWidgetFacing(this.toHandle(), facing, isInstant);
  }

  public setVertexColour(red: number, green: number, blue: number, alpha: number): void {
    return SetWidgetVertexColour(this.toHandle(), red, green, blue, alpha);
  }

  public setAnimationByIndex(animIndex: number): void {
    return SetWidgetAnimationByIndex(this.toHandle(), animIndex);
  }

  public setOrientation(yaw: number, pitch: number, roll: number): void {
    return SetWidgetOrientation(this.toHandle(), yaw, pitch, roll);
  }

  public setAnimation(animation: string): void {
    return SetWidgetAnimation(this.toHandle(), animation);
  }

  ///
  /// Props
  ///

  public timeScale(): number;
  public timeScale(value: Setter<number, this>): this;
  public timeScale(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetWidgetTimeScale(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetWidgetTimeScale(this.toHandle());
    }

    SetWidgetTimeScale(this.toHandle(), value);
    return this;
  }

  public invulnerable(): boolean;
  public invulnerable(value: Setter<boolean, this>): this;
  public invulnerable(value?: Setter<boolean, this>): boolean | this {
    if (typeof value === "function") {
      value = value(IsWidgetInvulnerable(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return IsWidgetInvulnerable(this.toHandle());
    }

    SetWidgetInvulnerable(this.toHandle(), value);
    return this;
  }

  public pitch(): number;
  public pitch(value: Setter<number, this>): this;
  public pitch(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetWidgetPitch(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetWidgetPitch(this.toHandle());
    }

    SetWidgetPitch(this.toHandle(), value);
    return this;
  }

  public visible(): boolean;
  public visible(value: Setter<boolean, this>): this;
  public visible(value?: Setter<boolean, this>): boolean | this {
    if (typeof value === "function") {
      value = value(IsWidgetVisible(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return IsWidgetVisible(this.toHandle());
    }

    SetWidgetVisible(this.toHandle(), value);
    return this;
  }

  public positionLocation(): HLocation;
  public positionLocation(value: Setter<HLocation, this>): this;
  public positionLocation(value?: Setter<HLocation, this>): HLocation | this {
    if (typeof value === "function") {
      value = value(GetWidgetPositionLocation(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetWidgetPositionLocation(this.toHandle());
    }

    SetWidgetPositionLocation(this.toHandle(), value);
    return this;
  }

  public roll(): number;
  public roll(value: Setter<number, this>): this;
  public roll(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetWidgetRoll(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetWidgetRoll(this.toHandle());
    }

    SetWidgetRoll(this.toHandle(), value);
    return this;
  }

  public life(): number;
  public life(value: Setter<number, this>): this;
  public life(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetWidgetLife(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetWidgetLife(this.toHandle());
    }

    SetWidgetLife(this.toHandle(), value);
    return this;
  }

  public x(): number;
  public x(value: Setter<number, this>): this;
  public x(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetWidgetX(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetWidgetX(this.toHandle());
    }

    SetWidgetX(this.toHandle(), value);
    return this;
  }

  public scale(): number;
  public scale(value: Setter<number, this>): this;
  public scale(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetWidgetScale(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetWidgetScale(this.toHandle());
    }

    SetWidgetScale(this.toHandle(), value);
    return this;
  }

  public y(): number;
  public y(value: Setter<number, this>): this;
  public y(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetWidgetY(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetWidgetY(this.toHandle());
    }

    SetWidgetY(this.toHandle(), value);
    return this;
  }

  public yaw(): number;
  public yaw(value: Setter<number, this>): this;
  public yaw(value?: Setter<number, this>): number | this {
    if (typeof value === "function") {
      value = value(GetWidgetYaw(this.toHandle()), this);
    }

    if (typeof value === "undefined") {
      return GetWidgetYaw(this.toHandle());
    }

    SetWidgetYaw(this.toHandle(), value);
    return this;
  }
}
